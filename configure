#!/bin/sh -eu
# generate config.mk

default_CFLAGS="-std=c99 -pedantic -Wall -D_POSIX_C_SOURCE=200112L -D_DEFAULT_SOURCE -D_BSD_SOURCE \\
	\${INC} -DVERSION=\\\"\${VERSION}\\\" -DBUILD_INFO=\"\\\"\${BUILD_INFO}\\\"\" -DGLEW_STATIC"

CC=
HOSTCC=
BIN2HDR=
CFLAGS=
INC=
LIB=
PREFIX=
TOOLCHAIN=
EXTRA_OBJ=
EXTRA_HDR=
static=n
embed_assets=n
enable_log_trace=n
debug_mode=n
win32_target=n

usage()
{
	cat - <<EOF
options:
	--prefix=<path>         Set install path prefix
	--static                Build statically
	--embed-assets          Build assets into executable binary
	--use-bin2hdr           Build a hand-rolled asset embedding tool as an
	                        alternative to \`xxd -i' (used by default when
	                        embedding assets and \`xxd' is not present in PATH)
	--log-trace             Enable \`TRACE' logging level
	--debug                 Set up debug mode:
	                        enable trace logging and add \`run' target
	--win32                 Build for win32 platform
	--include-dirs=<paths>  Custom include directories
	                        (e.g. -I/usr/local/include -I/my/very/own/path ...)
	--lib-dirs=<paths>      Custom library directories
	                        (e.g. -L/usr/local/lib -L/my/very/own/path ...)
	--toolchain=<prefix>    Specify toolchain prefix;
	                        useful for cross-compilation
	CC=<compiler>           Specify compiler to use
	HOSTCC=<compiler>       Specify compiler to use for building host binaries;
	                        relevant when cross-compiling
	CFLAGS=<flags>          Set custom C flags
EOF
	exit 2
}

for arg ; do
	case "${arg}" in
	-h|--help) usage ;;
	--prefix=*) PREFIX="${arg#*=}" ;;
	--static) static=y ;;
	--embed-assets) embed_assets=y ;;
	--use-bin2hdr) BIN2HDR="./bin2hdr" ;;
	--log-trace) enable_log_trace=y ;;
	--debug) debug_mode=y ;;
	--win32) win32_target=y ;;
	--include-dirs=*) INC="${arg#*=}" ;;
	--lib-dirs=*) LIB="${arg#*=}" ;;
	--toolchain=*) TOOLCHAIN="${arg#*=}" ;;
	CC=*) CC="${arg#*=}" ;;
	HOSTCC=*) HOSTCC="${arg#*=}" ;;
	CFLAGS=*) CFLAGS="${arg#*=}" ;;
	*) echo "unknown option \`${arg}'; try $0 --help" ; exit 1
	esac
done

[ "${static}" = "y" ] && CFLAGS="${CFLAGS} -static"
[ "${embed_assets}" = "y" ] && CFLAGS="${CFLAGS} -DEMBED_ASSETS" \
	&& EXTRA_OBJ="${EXTRA_OBJ} vfs.o dict.o" \
	&& EXTRA_HDR="${EXTRA_HDR} dict.h assets_data.gen.h" \
	&& [ ! -x "$(command -v xxd)" ] && BIN2HDR="./bin2hdr"
[ "${enable_log_trace}" = "y" ] || [ "${debug_mode}" = "y" ] && CFLAGS="${CFLAGS} -DENABLE_LOG_TRACE"
[ "${win32_target}" = "y" ] && EXTRA_OBJ="${EXTRA_OBJ} compat/info.res compat/w32io.o"

printf '# generated on %s\n\n' "$(date)" > config.mk
{
	echo "BUILD_INFO = $(uname -r) $(uname -m)"
	[ -n "${TOOLCHAIN}" ] \
		&& printf 'TOOLCHAIN = %s\nCC = %s\nWINDRES = %s\n' "${TOOLCHAIN}" '${TOOLCHAIN}gcc' '${TOOLCHAIN}windres'
	[ -n "${INC}" ] && echo "INC = ${INC}"
	[ -n "${LIB}" ] && echo "LIB = ${LIB}"
	[ -n "${CC}" ] && echo "CC = ${CC}"
	[ -n "${HOSTCC}" ] && echo "HOSTCC = ${HOSTCC}"
	[ -n "${BIN2HDR}" ] && echo "BIN2HDR = ${BIN2HDR}"
	[ -n "${CFLAGS}" ] && echo "CFLAGS = ${CFLAGS} ${default_CFLAGS}"
	[ -n "${PREFIX}" ] && echo "PREFIX = ${PREFIX}"
	[ -n "${EXTRA_OBJ}" ] && echo "EXTRA_OBJ = ${EXTRA_OBJ}"
	[ -n "${EXTRA_HDR}" ] && echo "EXTRA_HDR = ${EXTRA_HDR}"
	[ "${win32_target}" = "y" ] && echo "LDFLAGS = \${LIB} -lglew32s -lGLEW -lglfw3 -lm -lopengl32 -lws2_32 -lgdi32" \
		&& printf '\ntakkusu.exe: takkusu\n\tmv $< $@\n'
	[ "${debug_mode}" = "y" ] && printf '\nrun: all\n\t./takkusu\n'
} >> config.mk

# optionally build `bin2hdr' (binary file to C header converter) as an
# alternative to xxd
[ -n "${BIN2HDR}" ] && make bin2hdr

echo "generated new config.mk"
